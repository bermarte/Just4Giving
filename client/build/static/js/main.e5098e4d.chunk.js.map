{"version":3,"sources":["Home.jsx","Secret.jsx","Login.jsx","App.js","withAuth.jsx","serviceWorker.js","index.js"],"names":["Home","state","message","fetch","then","res","text","setState","className","this","Component","Secret","Login","props","handleInputChange","event","target","value","name","onSubmit","preventDefault","method","body","JSON","stringify","headers","status","Error","error","history","push","catch","err","console","alert","email","password","type","placeholder","onChange","required","App","to","path","exact","component","ComponentToProtect","loading","redirect","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e5098e4d.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nexport default class Home extends Component {\n  constructor() {\n    super();\n    this.state = {\n      message: \"Loading...\",\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"/api/home\")\n      .then((res) => res.text())\n      .then((res) => this.setState({ message: res }));\n  }\n\n  render() {\n    return (\n      <div className=\"home\">\n        <h1>Home</h1>\n        <p className=\"par\">{this.state.message}</p>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\n\nexport default class Secret extends Component {\n  constructor() {\n    super();\n    this.state = {\n      message: 'Loading...'\n    }\n  }\n\n  componentDidMount() {\n    fetch('/api/secret')\n      .then(res => res.text())\n      .then(res => this.setState({message: res}));\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Secret</h1>\n        <p>{this.state.message}</p>\n      </div>\n    );\n  }\n}","import React, { Component } from 'react';\n\nexport default class Login extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      email : '',\n      password: ''\n    };\n  }\n\n  handleInputChange = (event) => {\n    const { value, name } = event.target;\n    this.setState({\n      [name]: value\n    });\n  }\n\n  onSubmit = (event) => {\n    event.preventDefault();\n    fetch('/api/authenticate', {\n      method: 'POST',\n      body: JSON.stringify(this.state),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    })\n    .then(res => {\n      if (res.status === 200) {\n        this.props.history.push('/');\n      } else {\n        const error = new Error(res.error);\n        throw error;\n      }\n    })\n    .catch(err => {\n      console.error(err);\n      alert('Error logging in please try again');\n    });\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.onSubmit}>\n        <h1>Login Below!</h1>\n        <input\n          type=\"email\"\n          name=\"email\"\n          placeholder=\"Enter email\"\n          value={this.state.email}\n          onChange={this.handleInputChange}\n          required\n        />\n        <input\n          type=\"password\"\n          name=\"password\"\n          placeholder=\"Enter password\"\n          value={this.state.password}\n          onChange={this.handleInputChange}\n          required\n        />\n        <input type=\"submit\" value=\"Submit\"/>\n      </form>\n    );\n  }\n}","import React, { Component } from \"react\";\nimport { Link, Route, Switch } from \"react-router-dom\";\nimport withAuth from \"./withAuth\";\nimport Home from \"./Home\";\nimport Secret from \"./Secret\";\nimport Login from \"./Login\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"container\">\n        <ul className=\"list\">\n          <li>\n            <Link to=\"/\">Home</Link>\n          </li>\n          <li>\n            <Link to=\"/secret\">Secret</Link>\n          </li>\n          <li>\n            <Link to=\"/login\">Login</Link>\n          </li>\n        </ul>\n\n        <Switch>\n          <Route path=\"/\" exact component={Home} />\n          <Route path=\"/secret\" component={withAuth(Secret)} />\n          <Route path=\"/login\" component={Login} />\n        </Switch>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\n\nexport default function withAuth(ComponentToProtect) {\n  return class extends Component {\n    constructor() {\n      super();\n      this.state = {\n        loading: true,\n        redirect: false,\n      };\n    }\n\n    componentDidMount() {\n      fetch('/api/checkToken')\n        .then(res => {\n          if (res.status === 200) {\n            this.setState({ loading: false });\n          } else {\n            const error = new Error(res.error);\n            throw error;\n          }\n        })\n        .catch(err => {\n          console.error(err);\n          this.setState({ loading: false, redirect: true });\n        });\n    }\n\n\n    render() {\n      const { loading, redirect } = this.state;\n      if (loading) {\n        return null;\n      }\n      if (redirect) {\n        return <Redirect to=\"/login\" />;\n      }\n      return <ComponentToProtect {...this.props} />;\n    }\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from \"react-router-dom\";\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}